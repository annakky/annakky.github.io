{"componentChunkName":"component---src-templates-post-tsx","path":"/python-basic_2/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"예외처리\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\" aria-label=\"예외처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리</h2>\n<p>예외처리는 프로그램의 예상치 못한 종료나, 치명적인 오류를 예방할 수 있는 방법 중 하나이다. 따라서 꼼꼼하게 예외처리를 해 주는 것이 굉장이 중요하다고 할 수 있다. 이에 사용되는 것이 <strong>try-except-else(finally)</strong> 문이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">이름</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">try:</td>\n<td>예외 처리를 할 부분</td>\n</tr>\n<tr>\n<td align=\"center\">except:</td>\n<td>예외가 발생했을 때 실행할 코드</td>\n</tr>\n<tr>\n<td align=\"center\">else:</td>\n<td>예외가 발생하지 않았을 때 실행할 코드</td>\n</tr>\n<tr>\n<td align=\"center\">finally:</td>\n<td>예외 발생 여부와 상관없이 실행할 코드</td>\n</tr>\n</tbody>\n</table>\n<p>위 표에서 볼 수 있듯이, 예외 처리를 할 코드를 try 문에 넣은 뒤, 예외 발생 여부에 따른 코드를 알맞게 사용하면 된다. 아래 예시로 자세히 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num1<span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"나눗셈을 할 숫자를 2개 넣어주세요: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'오류 : 입력 값이 실수가 아닙니다.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'오류 발생'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"결과:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"프로그램 종료\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p><span style=\"color: skyblue;\">실행 결과</span></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">나눗셈을 할 숫자를 <span class=\"token number\">2</span>개 넣어주세요: <span class=\"token number\">10</span> <span class=\"token number\">2</span>\n결과: <span class=\"token number\">5.0</span>\n프로그램 종료</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">나눗셈을 할 숫자를 <span class=\"token number\">2</span>개 넣어주세요: a b\n오류 <span class=\"token builtin class-name\">:</span> 입력 값이 실수가 아닙니다.\n프로그램 종료</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">나눗셈을 할 숫자를 <span class=\"token number\">2</span>개 넣어주세요: <span class=\"token number\">10</span> <span class=\"token number\">0</span>\n오류 발생\n프로그램 종료</code></pre></div>\n<p>위 예제처럼, except 뒤에 추가적으로 error type을 지정하여, 특정 에러일 경우를 핸들링할 수 있다.\n실행 결과를 보면, <em>'a, b'</em> 처럼 실수가 아닌 값을 입력하면, ValueError 이므로, <strong>'except ValueError'</strong> 가 실행된다.\n두번째 입력값에 0을 넣게 되면, <em>ZeroDivisionError</em>가 발생하여, <strong>'except'</strong> 가 실행된다.\nZeroDivisionError만 특별히 핸들링하고 싶다면, <strong>'except ZeroDivisionError:'</strong> 로 구성하면 된다.</p>\n<br>\n<h2 id=\"클래스\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스</h2>\n<h3 id=\"--초기화-메소드\" style=\"position:relative;\"><a href=\"#--%EC%B4%88%EA%B8%B0%ED%99%94-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"  초기화 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 초기화 메소드</h3>\n<p>파이썬이 객체 지향 프로그래밍 언어인 것은 누구나 다 알 것이다. 그 OOL에 걸맞게 클래스를 잘 활용하기 위해, 클래스에 대해 자세히 아는 것이 중요하다. 객체는 정의될 때, 각 속성들을 초기화 및 할당해줘야한다. 마찬가지로 클래스도 마찬가지로 정의할 때 초기화를 해줘야하는데, 이 때 사용되는 것이 초기화 메소드, <strong><em><strong>init()</strong></em></strong> 이다. 아래 예제를 통해 자세히 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!! My name is\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nI\\'m {} years old!\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nminsoo <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'MinSoo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nminsoo<span class=\"token punctuation\">.</span>hi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Hello<span class=\"token operator\">!</span><span class=\"token operator\">!</span> My name is MinSoo \nI'm <span class=\"token number\">18</span> years old<span class=\"token operator\">!</span></code></pre></div>\n<p>위 예제를 보면, 생성자의 첫 번째 매개변수는 <strong>self</strong> 로, 이는 생성한 인스턴스를 의미한다. 클래스 내에서는 인스턴스를 부를 방법이 없기 때문에 self를 사용한다.  </p>\n<br>\n<h3 id=\"--문자열화-메소드\" style=\"position:relative;\"><a href=\"#--%EB%AC%B8%EC%9E%90%EC%97%B4%ED%99%94-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"  문자열화 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 문자열화 메소드</h3>\n<p>이와 비슷한 메소드가 더 있다. <a href=\"/python-basic_1/#--%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%8B%9D%EB%B3%84%EA%B0%92\">파이썬 기초 1</a>에서 확인할 수 있듯이, 모든 객체는 다른 객체와 구분되는 고유한 정보를 갖는데, 이를 <strong>id</strong> 라고 한다. 클래스 인스턴스도 객체이므로, id를 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>minsoo<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">&lt;</span>__main__.Person object at 0x0335F38<span class=\"token operator\"><span class=\"token file-descriptor important\">8</span>></span></code></pre></div>\n<p>'0x0335F388'가 바로 인스턴스의 아이디이다. 그러나 이를 통해 객체가 어떤 값을 가지고 있는지 알기 힘들다. 따라서 이를 도와주는 메소드가 바로 <strong><strong>str</strong></strong> 이다. 아래 예제로 자세히 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Person(name = '</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', age = '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!! My name is\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nI\\'m {} years old!\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nminsoo <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'MinSoo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>minsoo<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Person<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> MinSoo, age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"--캡슐화\" style=\"position:relative;\"><a href=\"#--%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"  캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 캡슐화</h3>\n<p>클래스를 사용하면서, 클래스 속성에 함부로 접근하지 못하도록 하고 싶을 수 있다. 단순히 [인스턴스 명].[속성명] 으로 쉽게 접근하면, 예상치 못하게 속성값이 변할 수 있기 때문이다. 따라서 이를 방지하기 위해 캡슐화를 하여 클래스를 만든다.\nJava와 C++에서는 private이라는 키워드를 통해서 접근 제한이 가능하지만, 파이썬은 제공하지 않는다. 따라서 변수 이름에 표시를 해, private 변수라는 것을 확인할 수 있도록 한다. 아래 예제를 통해 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>__age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> age <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>__age <span class=\"token operator\">=</span> age\n\nminsoo <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'MinSoo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>minsoo<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nminsoo<span class=\"token punctuation\">.</span>set_age<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>minsoo<span class=\"token punctuation\">.</span>get_age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">MinSoo\n<span class=\"token number\">18</span></code></pre></div>\n<p>위 예제를 보면, 멤버변수에 <strong><em>__</em></strong> 혹은 <strong><em>_</em></strong> 로 시작하도록 하여 멤버 변수를 보호한다.\n이처럼, get<em>name(), get</em>age(), set_age()와 같은 멤버 함수만을 통하여 멤버변수로 접근할 수 있도록 한다.\n물론 'minsoo.__age'를 통해 접근할 수 있지만, 프로그래머들 사이에 약속을 한다면 private 변수와 같은 효과를 볼 수 있다.\n또한 요즘 개발 환경에서는 __ 혹은 _ 로 시작하는 멤버 변수에 접근하지 못하도록 하기도 한다.  </p>\n<br>\n<h3 id=\"--특수-메소드\" style=\"position:relative;\"><a href=\"#--%ED%8A%B9%EC%88%98-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"  특수 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 특수 메소드</h3>\n<p>클래스를 만들어 사용하다보면, 인스턴스를 위한 연산, 혹은 함수를 사용하고 싶을 수 있다. 아래 예제를 통해 먼저 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'({}, {})'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\"># 덧셈 함수</span>\n        <span class=\"token keyword\">return</span> Vector<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n\nv1 <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nv2 <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p>클래스의 다른 인스턴스와의 상호작용을 하고 싶을 때는, 위와 같이 other를 사용하면 된다. 그러나 두 벡터의 합을 표현하는데 <em>add()</em> 는 직관적이지 않고, 사용하기 불편하다. 이렇게 덧셈과 뺄셈 연산자를 사용하기 위해서는 특수 메소드를 구현해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'({}, {})'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\"># '+' 연산자</span>\n        <span class=\"token keyword\">return</span> Vector<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__sub__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\"># '-' 연산자</span>\n        <span class=\"token keyword\">return</span> Vector<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> other<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> other<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n\nv1 <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nv2 <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nv3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2\nv4 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>-1, -1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>'+', '-' 외에 다른 산술 연산자 뿐만 아니라, 비교 연산자, 내장 함수들까지 특수 메소드로 구현할 수 있다. 내장 함수들은 종류가 많아 따로 정리하지는 않았다. <em>len()</em> 함수를 <em>__len__()</em> 처럼 특수 메소드로 구현할 수 있으니, 잘 응용하면 될 것이다. 산술 연산자와 비교 연산자를 표를 통해 정리해놓았다. 아래 표를 통해 확인해보자.</p>\n<ul>\n<li>산술 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산자</th>\n<th align=\"center\">특수 메소드</th>\n<th>하는 일</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">x + y</td>\n<td align=\"center\">__add__(self, other)</td>\n<td>x와 y의 합</td>\n</tr>\n<tr>\n<td align=\"center\">x - y</td>\n<td align=\"center\">__sub__(self, other)</td>\n<td>x와 y의 차</td>\n</tr>\n<tr>\n<td align=\"center\">x * y</td>\n<td align=\"center\">__mul__(self, other)</td>\n<td>x와 y의 곱</td>\n</tr>\n<tr>\n<td align=\"center\">x ** y</td>\n<td align=\"center\">__pow__(self, other)</td>\n<td>x의 y 거듭제곱</td>\n</tr>\n<tr>\n<td align=\"center\">x / y</td>\n<td align=\"center\">__truediv__(self, other)</td>\n<td>x를 y로 나눈 값</td>\n</tr>\n<tr>\n<td align=\"center\">X // y</td>\n<td align=\"center\">__floordiv__(self, other)</td>\n<td>x를 y로 나눈 몫</td>\n</tr>\n<tr>\n<td align=\"center\">x % y</td>\n<td align=\"center\">__mod__(self, other)</td>\n<td>x를 y로 나눈 나머지</td>\n</tr>\n<tr>\n<td align=\"center\">+x</td>\n<td align=\"center\">__pos__(self)</td>\n<td>x의 양수</td>\n</tr>\n<tr>\n<td align=\"center\">-x</td>\n<td align=\"center\">__neg__(self)</td>\n<td>x의 음수</td>\n</tr>\n</tbody>\n</table>\n<br>\n<ul>\n<li>비교 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산자</th>\n<th align=\"center\">특수 메소드</th>\n<th>하는 일</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">x &#x3C; y</td>\n<td align=\"center\">__lt__(self, other)</td>\n<td>x가 y보다 작은가</td>\n</tr>\n<tr>\n<td align=\"center\">x &#x3C;= y</td>\n<td align=\"center\">__le__(self, other)</td>\n<td>x가 y보다 작거나 같은가</td>\n</tr>\n<tr>\n<td align=\"center\">x >= y</td>\n<td align=\"center\">__ge__(self, other)</td>\n<td>x가 y보다 크거나 같은가</td>\n</tr>\n<tr>\n<td align=\"center\">x > y</td>\n<td align=\"center\">__gt__(self, other)</td>\n<td>x가 y보다 큰가</td>\n</tr>\n<tr>\n<td align=\"center\">x == y</td>\n<td align=\"center\">__eq__(self, other)</td>\n<td>x와 y가 같은가</td>\n</tr>\n<tr>\n<td align=\"center\">X != y</td>\n<td align=\"center\">__ne__(self, other)</td>\n<td>x와 y가 다른가</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h3 id=\"--클래스-변수\" style=\"position:relative;\"><a href=\"#--%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EC%88%98\" aria-label=\"  클래스 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 클래스 변수</h3>\n<p>클래스에서, 모든 인스턴스가 공통적으로 갖는 특징이 있을 수 있다. 예를 들면, 원에 대한 클래스를 지정하는데, 원주율(PI)는 모든 원이 같은 값을 가진다. 따라서 생성자를 통해 계속 원마다 초기화하는 것보다, 모든 인스턴스가 공통적으로 갖는 변수로 지정하는게 효율적이다. 이를 클래스 변수라고 한다. 아래 예제를 통해 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">:</span>\n    PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592</span>       <span class=\"token comment\"># 클래스 변수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>__radius <span class=\"token operator\">=</span> radius\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> Circle<span class=\"token punctuation\">.</span>PI <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>__radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n\nc1 <span class=\"token operator\">=</span> Circle<span class=\"token punctuation\">(</span><span class=\"token string\">'C1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nc2 <span class=\"token operator\">=</span> Circle<span class=\"token punctuation\">(</span><span class=\"token string\">'C2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">50.265472</span>\n<span class=\"token number\">28.274328</span></code></pre></div>\n<blockquote>\n<p>단, 클래스 내부에서 클래스 변수를 사용할 때는, <em>Circle.PI</em> 로 사용하여야 한다.</p>\n</blockquote>\n<br>\n<h2 id=\"람다-함수\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4-%ED%95%A8%EC%88%98\" aria-label=\"람다 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다 함수</h2>\n<p>이전 포스트 <a href=\"/python-basic_1/#%EB%A3%A8%ED%94%84-%EC%A0%9C%EC%96%B4%EB%B3%80%EC%88%98-%EC%9D%B5%EB%AA%85%ED%99%94\">파이썬 기초 1</a> 에서 익명화에 대해 잠깐 언급한 적이 있다.\n이와 비슷하게, 람다 함수는 이름이 없는 특성 때문에 익명 함수라고도 불린다.\n람다 함수는 어떨때 보통 사용할까? 함수를 만들고 싶지 않지만 함수화 된 기능을 사용하고 싶거나, 1회용으로 사용할 함수를 만들고 싶을 때 많이 사용한다.<br>\n<br>\n그렇다면, 굳이 람다 함수를 사용하는 이유가 무엇일까? 이는 바로, 람다 함수를 사용하면 축약된 표현으로 코드가 간결해지고, 메모리 공간을 별도로 할당하지 않기 때문에 메모리를 절약할 수 있다. 람다 함수는 사용된 후, 힙 메모리에서 사라지기 때문이다. 그럼 람다 함수의 사용법에 대해 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">[</span>매개변수<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>표현식<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이해를 돕기 위해 예제를 준비했다.\n아래 예제를 통해 람다 함수에 대해 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>          <span class=\"token comment\"># add 함수</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100 + 200 ='</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100 + 200 ='</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\"># 람다 함수</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">100</span> + <span class=\"token number\">200</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n<span class=\"token number\">100</span> + <span class=\"token number\">200</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span></code></pre></div>\n<p>위 예제를 보면, 동일한 결과값이 나오는 것을 확인할 수 있다. 위 예제는 일반적으로 람다 함수를 사용하는 방법은 아니지만, 람다 함수에 대해 이해할 수 있는 예제라고 생각된다. 람다 함수는 필터 혹은 맵과 함께 자주 사용된다. 그럼 필터 함수가 무엇인지 살펴보겠다.</p>\n<br>\n<h2 id=\"필터-함수\" style=\"position:relative;\"><a href=\"#%ED%95%84%ED%84%B0-%ED%95%A8%EC%88%98\" aria-label=\"필터 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필터 함수</h2>\n<p>필터 함수는, 리스트와 같은 반복 가능한 요소들을 함수에 넣어 참인 것만 묶어서 반환한다. 필터 함수의 문법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>적용할 함수<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>반복 가능 객체<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이해를 돕기 위해, 아래 예제를 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">filter_positive</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\nnum_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>filter_positive<span class=\"token punctuation\">,</span> num_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> </code></pre></div>\n<p>만약 <em>filter_positive()</em> 함수가 한번만 사용된다면, 람다 함수를 통해 코드를 간결하게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> </code></pre></div>\n<br>\n<h2 id=\"맵-함수\" style=\"position:relative;\"><a href=\"#%EB%A7%B5-%ED%95%A8%EC%88%98\" aria-label=\"맵 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵 함수</h2>\n<p>맵 함수는 반복 가능한 자료형의 각 요소들에 대하여 지정한 함수를 적용한 뒤, 반복 가능한 자료형을 반환한다.\n맵 함수의 문법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>적용할 함수<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>반복 가능 객체<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>어려운 내용은 아니지만, 글로만 보면 이해에 어려움을 겪을 수 있다. 아래 예제를 보면 도움이 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n\nnum_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nsquare_list <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> num_list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>square_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> num_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">9</span>, <span class=\"token number\">4</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">9</span>, <span class=\"token number\">4</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위와 같이, 직접 함수를 만들어서 적용하여도 되고, 람다 함수를 통해 map을 사용해도 같은 결과값이 나오는 것을 확인할 수 있다.</p>\n<br>\n<h2 id=\"리스트-축약-표현\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%B6%95%EC%95%BD-%ED%91%9C%ED%98%84\" aria-label=\"리스트 축약 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트 축약 표현</h2>\n<p>람다 함수, 필터, 맵을 통해 리스트를 축약해서 표현할 수 있다. 또한 리스트 뿐만 아니라 반복 가능 객체는 모두 가능하다. 리스트 축약 표현의 문법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span>표현식<span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>변수<span class=\"token punctuation\">}</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>반복자<span class=\"token operator\">/</span>연속열<span class=\"token punctuation\">}</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">{</span>조건 표현식<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위에서 나오는 <strong>{표현식}</strong> 은 <strong>맵</strong> 의 기능을 수행하고, <strong>{조건 표현식}</strong> 은 <strong>필터</strong> 의 기능을 수행한다. 그리고 조건 표현식은 생략 가능하다. 아래 예제를 통해 자세히 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nsquare_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> num_list<span class=\"token punctuation\">]</span>            <span class=\"token comment\"># 리스트의 모든 값 제곱</span>\npositive_square_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> num_list <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>          <span class=\"token comment\"># 리스트의 양수 값 제곱</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>square_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>positive_square_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">9</span>, <span class=\"token number\">4</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">4</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>이를 응용하면, 두 리스트의 곱을 짧은 코드로 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">product_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> y <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>product_list<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">4</span>, <span class=\"token number\">6</span>, <span class=\"token number\">4</span>, <span class=\"token number\">8</span>, <span class=\"token number\">12</span>, <span class=\"token number\">6</span>, <span class=\"token number\">12</span>, <span class=\"token number\">18</span>, <span class=\"token number\">8</span>, <span class=\"token number\">16</span>, <span class=\"token number\">24</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>조건 표현식 또한 다양하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 1-30 중에서 2 또는 3의 배수</span>\nlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 1-30 중에서 2와 3의 배수</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<h2 id=\"제너레이터\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"제너레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너레이터</h2>\n<p>제너레이터는 반복자와 거의 유사하다. 다만, 반복자와 다른 점은 모든 값을 메모리에 올려두고 사용하는 것이 아니라, 필요할 때마다 생성해서 반환하는 일을 한다.  따라서 메모리에 보관해놓지 않으니, 메모리를 효율적으로 사용할 수 있다는 장점이 있다. 이런 점 때문에, 한번 제너레이터를 실행하면, 다음에는 아무런 객체도 반환하지 않는다.\n제너레이터와 같이 쓰이는 <strong><em>yield</em></strong> 라는 함수가 있다. 이는 함수의 <strong><em>return</em></strong> 과 비슷하다. 그러나 yield는 제너레이터를 반환한다는 점에서 return과 차이가 있다\n아래 예시를 통해 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> x\n\nmy_generator <span class=\"token operator\">=</span> create_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'첫번째 제너레이터 실행'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> my_generator<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'두번째 제너레이터 실행'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> my_generator<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">첫번째 제너레이터 실행\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n두번째 제너레이터 실행</code></pre></div>\n<p>위와 같이, 제너레이터를 한번 실행하면, 다음번에는 아무것도 반환하지 않기 때문에 주의해야 한다.</p>\n<br>\n<h2 id=\"끝맺음\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EB%A7%BA%EC%9D%8C\" aria-label=\"끝맺음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝맺음</h2>\n<p>여기까지가 파이썬의 기초이다. 다음 포스트에서는 파이썬 심화에 대해 글을 쓸 예정이다. 파이썬의 내부 구조에 대해 관심이 있으면 참고하길 바란다.</p>","excerpt":"예외처리 예외처리는 프로그램의 예상치 못한 종료나, 치명적인 오류를 예방할 수 있는 방법 중 하나이다. 따라서 꼼꼼하게 예외처리를 해 주는 것이 굉장이 중요하다고 할 수 있다. 이에 사용되는 것이 try-except-else(finally) 문이다.…","tableOfContents":"<ul>\n<li><a href=\"/python-basic_2/#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\">예외처리</a></li>\n<li>\n<p><a href=\"/python-basic_2/#%ED%81%B4%EB%9E%98%EC%8A%A4\">클래스</a></p>\n<ul>\n<li><a href=\"/python-basic_2/#--%EC%B4%88%EA%B8%B0%ED%99%94-%EB%A9%94%EC%86%8C%EB%93%9C\">- 초기화 메소드</a></li>\n<li><a href=\"/python-basic_2/#--%EB%AC%B8%EC%9E%90%EC%97%B4%ED%99%94-%EB%A9%94%EC%86%8C%EB%93%9C\">- 문자열화 메소드</a></li>\n<li><a href=\"/python-basic_2/#--%EC%BA%A1%EC%8A%90%ED%99%94\">- 캡슐화</a></li>\n<li><a href=\"/python-basic_2/#--%ED%8A%B9%EC%88%98-%EB%A9%94%EC%86%8C%EB%93%9C\">- 특수 메소드</a></li>\n<li><a href=\"/python-basic_2/#--%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EC%88%98\">- 클래스 변수</a></li>\n</ul>\n</li>\n<li><a href=\"/python-basic_2/#%EB%9E%8C%EB%8B%A4-%ED%95%A8%EC%88%98\">람다 함수</a></li>\n<li><a href=\"/python-basic_2/#%ED%95%84%ED%84%B0-%ED%95%A8%EC%88%98\">필터 함수</a></li>\n<li><a href=\"/python-basic_2/#%EB%A7%B5-%ED%95%A8%EC%88%98\">맵 함수</a></li>\n<li><a href=\"/python-basic_2/#%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%B6%95%EC%95%BD-%ED%91%9C%ED%98%84\">리스트 축약 표현</a></li>\n<li><a href=\"/python-basic_2/#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0\">제너레이터</a></li>\n<li><a href=\"/python-basic_2/#%EB%81%9D%EB%A7%BA%EC%9D%8C\">끝맺음</a></li>\n</ul>","fields":{"slug":"/python-basic_2/"},"frontmatter":{"title":"파이썬 기초 2","date":"Nov 25, 2020","tags":["python"],"keywords":["Annakky","Nak Kyun An"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/python-basic_2/","series":[{"slug":"/python-basic_1/","title":"파이썬 기초 1","num":1},{"slug":"/python-basic_2/","title":"파이썬 기초 2","num":2}],"lastmod":"2020-11-25"}},"staticQueryHashes":["2027115977","694178885"]}