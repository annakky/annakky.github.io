{"componentChunkName":"component---src-templates-post-tsx","path":"/python-basic_1/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"파이썬을-다시-공부하다-알게된-점\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8B%A4-%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\" aria-label=\"파이썬을 다시 공부하다 알게된 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬을 다시 공부하다 알게된 점</h2>\n<p>필자는 파이썬으로 개발을 하면서 파이썬 기본서를 본 적이 없다. 다른 언어를 하면서 익힌 내용들을 바탕으로 구글링을 통해 개발을 하였다.\n그래서 이번에 파이썬 개발서를 한번 훑다가 몰랐던 기능들 혹은 정리하고 싶은 내용들을 정리하려고 한다. '파이썬 기초' 를 포스트 하면서 <strong><em>으뜸 파이썬(박동규, 강영민 지음)</em></strong> 책을 참고하였다. 자세한 내용은 책을 참고하면 좋을 것 같다.\n<br><br></p>\n<h2 id=\"복소수\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%86%8C%EC%88%98\" aria-label=\"복소수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복소수</h2>\n<p>파이썬에서는 복소수를 표현할 수 있다. 여기서 주의할 점은 허수부에 <em>'i'</em> 대신 <em>'j'</em>를 사용한다는 것이다. 아래 예제로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">c <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> 4i  <span class=\"token comment\"># i 대신 j를 써야함</span>\n\nSyntaxError<span class=\"token punctuation\">:</span> invalid syntax</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">c <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4j</span>\nc<span class=\"token punctuation\">.</span>real  <span class=\"token comment\"># c의 실수부 출력</span>\n<span class=\"token operator\">></span> <span class=\"token number\">3.0</span>\n\nc<span class=\"token punctuation\">.</span>imag  <span class=\"token comment\"># c의 허수부 출력</span>\n<span class=\"token operator\">></span> <span class=\"token number\">4.0</span></code></pre></div>\n<p>복소수 관련 추가적인 함수들이 있다. 아래 예제로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">c <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4j</span>\nc<span class=\"token punctuation\">.</span>conjugate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># c의 켤레 복소수</span>\n<span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token number\">4j</span>\n\n<span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># c의 복소평면에서의 원점까지의 거리</span>\n<span class=\"token operator\">></span> <span class=\"token number\">5</span></code></pre></div>\n<br>\n<h2 id=\"할당문\" style=\"position:relative;\"><a href=\"#%ED%95%A0%EB%8B%B9%EB%AC%B8\" aria-label=\"할당문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>할당문</h2>\n<p>변수에 값을 할당하는 방법은 모두 잘 알고있을 것이다. 파이썬에서는 <em>'동시 할당문'</em> 이라는 재밌는 기능이 있다. 아래 예제로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">num <span class=\"token operator\">=</span> <span class=\"token number\">10</span>                  <span class=\"token comment\"># 기본 할당문</span>\n\nnum1 <span class=\"token operator\">=</span> num2 <span class=\"token operator\">=</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\"># 다중 할당문</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>\n\nnum4<span class=\"token punctuation\">,</span> num5 <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span>     <span class=\"token comment\"># 동시 할당문</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num4<span class=\"token punctuation\">,</span> num5<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span></code></pre></div>\n<br>\n<h2 id=\"비트-연산자\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"비트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자</h2>\n<p>비트 연산자에 경우, 필자의 경험상 많이 사용하지 않는다. 직관적이지 않고 혼동의 우려가 있기 때문에 선호하지는 않지만, 굳이 비트 연산자를 사용하는 경우가 있다. 이는 비트 연산자가 가진 큰 장점 때문인데, <strong><em>연산이 빠르다는 것</em></strong>이다. 아래 표를 통해 비트 연산자를 정리해두었다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산자</th>\n<th align=\"left\">의미</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">&#x26;</td>\n<td align=\"left\">비트 단위 AND</td>\n<td>두 피연산자의 해당 비트가 모두 1이면 1, 아니면 0</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"left\">비트 단위 OR</td>\n<td>두 피연산자의 해당 비트가 하나라도 1이면 1, 아니면 0</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"left\">비트 단위 XOR</td>\n<td>두 피연산자의 해당 비트가 값이 같으면 1, 아니면 0</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"left\">비트 단위 NOT</td>\n<td>피연산자의 해당 비트가 0이면 1, 1이면 0</td>\n</tr>\n<tr>\n<td align=\"center\">&#x3C;&#x3C;</td>\n<td align=\"left\">비트 단위 왼쪽으로 이동</td>\n<td>지정된 개수만큼 모든 비트를 왼쪽으로 이동</td>\n</tr>\n<tr>\n<td align=\"center\">>></td>\n<td align=\"left\">비트 단위 오른쪽으로 이동</td>\n<td>지정된 개수만큼 모든 비트를 오른쪽으로 이동</td>\n</tr>\n</tbody>\n</table>\n<p>파이썬에서 이진수 값을 확인하는 방법은 간단하다. <em>'bin'</em> 함수를 사용하면 쉽게 이진수 형식으로 출력이 가능하다. 아래 예제로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 2진수 형식으로 출력</span>\n<span class=\"token operator\">></span> <span class=\"token string\">'0b1001'</span>  <span class=\"token comment\"># 0b는 binary라는 의미</span></code></pre></div>\n<br>\n<h2 id=\"루프-제어변수-익명화\" style=\"position:relative;\"><a href=\"#%EB%A3%A8%ED%94%84-%EC%A0%9C%EC%96%B4%EB%B3%80%EC%88%98-%EC%9D%B5%EB%AA%85%ED%99%94\" aria-label=\"루프 제어변수 익명화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루프 제어변수 익명화</h2>\n<p>불필요한 메모리 사용을 줄이기 위해, 혹은 한번만 사용할 것에 대해 이름을 정하는 것이 불필요하다고 생각할 수 있다. 이를 위해 <strong>익명화</strong> 라는 기능이 있다. 아래 예제를 보며 알아가보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> Hello World\n<span class=\"token operator\">></span> Hello World\n<span class=\"token operator\">></span> Hello World\n\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 루프 변수의 익명화</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> Hello World\n<span class=\"token operator\">></span> Hello World\n<span class=\"token operator\">></span> Hello World</code></pre></div>\n<p><strong>+</strong> range\n추가적으로 range에 대해 조금 설명을 하자면, range는 세가지 변수를 가질 수 있다.<br>\n<br></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p>  <strong>start</strong>는 시작값을 지정해주는 변수로, 생략시 0으로 할당된다.\n<strong>stop</strong>은 반복이 끝나는 시점을 알려주는 변수로, stop 보다 작은 경우에 반복한다.\n<strong>step</strong>은 증가값을 지정해주는 변수로, 생략시 1로 할당된다.\n<br><br></p>\n<p>  여기서 주의할 점은, stop이 <strong><em>'미만'</em></strong> 이므로 0부터 10까지의 정수 출력을 원한다면, <em>range(0, 10, 1)</em>이 아닌, <strong>range(0, 11, 1)</strong>을 해야한다.</p>\n<br>\n<h2 id=\"반복문의-break-continue\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%98-break-continue\" aria-label=\"반복문의 break continue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문의 break, continue</h2>\n<p>반복문에서 특정 조건일 때, 반복을 그만하거나 건너뛰고 싶을 수 있다. 그럴때 break 혹은 continue를 사용하면 프로그램 제어를 효율적으로 할 수 있다. 아래 예시를 통해 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">st <span class=\"token operator\">=</span> <span class=\"token string\">'start'</span>\n\n<span class=\"token comment\"># 모음을 찾으면 반복문 종료</span>\n<span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> st<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> st</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">st <span class=\"token operator\">=</span> <span class=\"token string\">'start'</span>\n\n<span class=\"token comment\"># 자음만 출력</span>\n<span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> st<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>            <span class=\"token comment\"># 모음이면, 아래 print 함수 건너뜀</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> strt</code></pre></div>\n<br>\n<blockquote>\n<p>break와 continue는 프로그램 제어에 효과적이지만, 너무 많이 사용하면 제어 흐름에 일관성이 없어져 프로그램 이해에 어려움을 겪을 수 있다.\n따라서 필요한 경우에만 사용하는 것을 권장한다.</p>\n</blockquote>\n<p><br><br></p>\n<h2 id=\"함수의-전역변수-참조-인자-전달\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EC%B0%B8%EC%A1%B0-%EC%9D%B8%EC%9E%90-%EC%A0%84%EB%8B%AC\" aria-label=\"함수의 전역변수 참조 인자 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 전역변수 참조, 인자 전달</h2>\n<p>전역변수를 자주 사용하는 것은 에러의 주 원인이 된다. 따라서 사용을 최대한 줄여야하지만, 불가피하게 사용해야할 경우가 있다. 이 때, 함수에서 전역변수의 참조 방법을 설명하려고 한다. 다음 예제로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> a<span class=\"token punctuation\">,</span> b\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 내부의 sum:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># a, b는 함수 외부에서 선언된 변수를 사용함</span>\n\na<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\nprint_sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 두 전역변수를 a = 10, b = 20으로 변환</span>\nresult <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 외부의 sum:'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color: skyblue;\">실행 결과</span></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">함수 내부의 sum: <span class=\"token number\">30</span>\n함수 외부의 sum: <span class=\"token number\">30</span></code></pre></div>\n<p>단, <strong><em>'global'</em></strong> 은 할당문에서 사용할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">global</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>   <span class=\"token comment\"># 문법오류 발생</span></code></pre></div>\n<br>\n<p>또한 함수를 호출할 때, 인자를 빠뜨리더라도 에러가 발생하지 않도록 할 수 있다. 바로 <strong><em>디폴트 인자</em></strong> 를 통해 매개변수에 기본값을 할당해 줄 수 있다. 아래 예제를 통해 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_star</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\"># 매개변수는 기본값으로 1을 가짐</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\nprint_star<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 인자를 전달하지 않아, n = 1 설정됨</span>\nprint_star<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 5를 인자로 전달하여, n = 1 은 수행되지 않음</span></code></pre></div>\n<p><span style=\"color: skyblue;\">실행 결과</span></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">*\n*****</code></pre></div>\n<p>단, 디폴트 매개변수를 할당할 때는, 전체 매개변수에 할당하거나, <strong>매개변수 출현 순서상 뒤에 있는 변수부터 할당</strong>해야한다.\n아래 예제를 통해 구체적으로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sum_first</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first sum:'</span><span class=\"token punctuation\">,</span> sum_first<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color: skyblue;\">실행 결과</span></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">first sum: <span class=\"token number\">3</span></code></pre></div>\n<br>\n<p>위와 달리, 첫번째 매개변수에 디폴트 값을 지정해주면 오류가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sum_second</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       <span class=\"token comment\"># 디폴트 매개변수 오류</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second sum:'</span><span class=\"token punctuation\">,</span> sum_second<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><span style=\"color: skyblue;\">실행 결과</span></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">SyntaxError: non-default argument follows default argument</code></pre></div>\n<br>\n<h2 id=\"객체의-식별값\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%8B%9D%EB%B3%84%EA%B0%92\" aria-label=\"객체의 식별값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체의 식별값</h2>\n<p>파이썬은 많은 내장함수를 가지고 있다. 그 중, <strong><em>id()</em></strong> 를 알아보자.<br>\n파이썬은 객체지향 프로그래밍 언어로, 객체마다 다른 객체와 구별되는 고유한 <strong>식별값</strong>을 갖는다. 이를 정수형으로 반환해주는 함수가 바로 <strong><em>id()</em></strong>이다. 아래 예제로 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">str_a <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO!\"</span>\n<span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>str_a<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token number\">21989600</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token number\">1919929824</span></code></pre></div>\n<br>\n<h2 id=\"zip-함수\" style=\"position:relative;\"><a href=\"#zip-%ED%95%A8%EC%88%98\" aria-label=\"zip 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>zip() 함수</h2>\n<p>파이썬에서는 반복가능 자료형으로 분류되는 자료형이 있다. 여기에는 리스트, 딕셔너리, 집합, 튜플과 같은 자료형들이 있다. 이러한 자료형을 여러개 넘겨주면, 이들을 합쳐 튜플 반복자를 반환하는 함수가 바로 zip() 함수이다. 글로만 봤을때는 이해가 잘 안될 것이다. 아래 예제로 자세히 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">str_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'third'</span><span class=\"token punctuation\">]</span>\nint_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\nfruit_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">]</span>\n\niterator <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>str_list<span class=\"token punctuation\">,</span> int_tuple<span class=\"token punctuation\">,</span> fruit_list<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'third'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>예제를 살펴보면, 같은 인덱스의 데이터끼리 묶어서 반환하는 것을 알 수 있다.\n또한 세 반복가능 데이터의 길이가 3, 5, 4로 다 다르다. 이 경우, 가장 작은 길이인 3까지의 튜플 반복자를 생성함을 알 수 있다.  </p>\n<br>\n<p>여기서, 더 많은 원소를 가진 리스트로 순서 쌍을 만들고 싶다면, itertools 모듈을 import해 zip<em>longest를 사용해야한다. zip</em>longest를 사용하면, 부족한 원소는 None으로 처리한다. 아래 예제를 통해 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools <span class=\"token keyword\">as</span> it\n\nlist_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nlist_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> it<span class=\"token punctuation\">.</span>zip_longest<span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">,</span> list_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">33</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>None, <span class=\"token number\">55</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h3 id=\"--chain\" style=\"position:relative;\"><a href=\"#--chain\" aria-label=\"  chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- chain()</h3>\n<p>itertools 모듈을 언급하였으니, 모듈이 가지고 있는 함수 중 몇가지만 더 소개하겠다.<br>\n<strong>chain()</strong> 함수는 2개의 리스트를 하나로 묶어 원소를 반환하는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools <span class=\"token keyword\">as</span> it\n\nlist_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nlist_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">]</span>\n\nchain_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">,</span> list_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chain_list<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span>, <span class=\"token number\">11</span>, <span class=\"token number\">22</span>, <span class=\"token number\">33</span>, <span class=\"token number\">44</span>, <span class=\"token number\">55</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>실행 결과를 확인하면 list<em>1 원소 이후에 list</em>2 원소가 붙게됨을 알 수 있다.</p>\n<br>\n<h3 id=\"--combinations\" style=\"position:relative;\"><a href=\"#--combinations\" aria-label=\"  combinations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- combinations()</h3>\n<p><strong>combinations()</strong> 함수는 리스트 원소 중 n개를 선택해서 중복되지 않는 모든 경우의 수를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools <span class=\"token keyword\">as</span> it\nlist_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\ncombi_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>combinations<span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>combi_list<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>실행 결과를 확인하면 list_1의 원소들 중 3개를 중복없이 뽑는 경우의 수를 리스트로 출력한다. 이 때, 리스트 원소의 타입은 튜플이다.</p>\n<br>\n<h3 id=\"--permutations\" style=\"position:relative;\"><a href=\"#--permutations\" aria-label=\"  permutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- permutations()</h3>\n<p><strong>permutations()</strong> 함수는 리스트 원소 중 n개를 선택하여, 원소 순서에 따른 모든 경우의 수를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools <span class=\"token keyword\">as</span> it\nlist_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\npermu_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>permutations<span class=\"token punctuation\">(</span>list_1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>permu_list<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><em>combination()</em> 과 <em>permutations()</em> 의 다른 점은 순서를 무시하느냐, 고려하느냐의 차이이다.</p>","excerpt":"파이썬을 다시 공부하다 알게된 점 필자는 파이썬으로 개발을 하면서 파이썬 기본서를 본 적이 없다. 다른 언어를 하면서 익힌 내용들을 바탕으로 구글링을 통해 개발을 하였다.\n그래서 이번에 파이썬 개발서를 한번 훑다가 몰랐던 기능들 혹은 정리하고 싶은 …","tableOfContents":"<ul>\n<li><a href=\"/python-basic_1/#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8B%A4-%EC%95%8C%EA%B2%8C%EB%90%9C-%EC%A0%90\">파이썬을 다시 공부하다 알게된 점</a></li>\n<li><a href=\"/python-basic_1/#%EB%B3%B5%EC%86%8C%EC%88%98\">복소수</a></li>\n<li><a href=\"/python-basic_1/#%ED%95%A0%EB%8B%B9%EB%AC%B8\">할당문</a></li>\n<li><a href=\"/python-basic_1/#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\">비트 연산자</a></li>\n<li><a href=\"/python-basic_1/#%EB%A3%A8%ED%94%84-%EC%A0%9C%EC%96%B4%EB%B3%80%EC%88%98-%EC%9D%B5%EB%AA%85%ED%99%94\">루프 제어변수 익명화</a></li>\n<li><a href=\"/python-basic_1/#%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%98-break-continue\">반복문의 break, continue</a></li>\n<li><a href=\"/python-basic_1/#%ED%95%A8%EC%88%98%EC%9D%98-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EC%B0%B8%EC%A1%B0-%EC%9D%B8%EC%9E%90-%EC%A0%84%EB%8B%AC\">함수의 전역변수 참조, 인자 전달</a></li>\n<li><a href=\"/python-basic_1/#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%8B%9D%EB%B3%84%EA%B0%92\">객체의 식별값</a></li>\n<li>\n<p><a href=\"/python-basic_1/#zip-%ED%95%A8%EC%88%98\">zip() 함수</a></p>\n<ul>\n<li><a href=\"/python-basic_1/#--chain\">- chain()</a></li>\n<li><a href=\"/python-basic_1/#--combinations\">- combinations()</a></li>\n<li><a href=\"/python-basic_1/#--permutations\">- permutations()</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/python-basic_1/"},"frontmatter":{"title":"파이썬 기초 1","date":"Nov 23, 2020","tags":["python"],"keywords":["Annakky","Nak Kyun An"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/python-basic_1/","series":[{"slug":"/python-basic_1/","title":"파이썬 기초 1","num":1},{"slug":"/python-basic_2/","title":"파이썬 기초 2","num":2}],"lastmod":"2020-11-23"}},"staticQueryHashes":["2027115977","694178885"]}