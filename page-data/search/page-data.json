{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\r\n## 파이썬을 다시 공부하다 알게된 점\r\n\r\n필자는 파이썬으로 개발을 하면서 파이썬 기본서를 본 적이 없다. 다른 언어를 하면서 익힌 내용들을 바탕으로 구글링을 통해 개발을 하였다.\r\n그래서 이번에 파이썬 개발서를 한번 훑다가 몰랐던 기능들 혹은 정리하고 싶은 내용들을 정리하려고 한다.\r\n<br><br>\r\n\r\n### - 복소수\r\n\r\n파이썬에서는 복소수를 표현할 수 있다. 여기서 주의할 점은 허수부에 *'i'* 대신 *'j'*를 사용한다는 것이다. 아래 예제로 확인해보자.\r\n\r\n```python\r\nc = 3 + 4i  # i 대신 j를 써야함\r\n\r\nSyntaxError: invalid syntax\r\n```\r\n\r\n```python\r\nc = 3 + 4j\r\nc.real  # c의 실수부 출력\r\n> 3.0\r\n\r\nc.imag  # c의 허수부 출력\r\n> 4.0\r\n```\r\n\r\n복소수 관련 추가적인 함수들이 있다. 아래 예제로 확인해보자.\r\n\r\n```python\r\nc = 3 + 4j\r\nc.conjugate() # c의 켤레 복소수\r\n> 3 - 4j\r\n\r\nabs(c)        # c의 복소평면에서의 원점까지의 거리\r\n> 5\r\n```\r\n<br>\r\n\r\n### - 할당문\r\n\r\n변수에 값을 할당하는 방법은 모두 잘 알고있을 것이다. 파이썬에서는 _'동시 할당문'_ 이라는 재밌는 기능이 있다. 아래 예제로 확인해보자.\r\n\r\n```python\r\nnum = 10                  # 기본 할당문\r\n\r\nnum1 = num2 = num3 = 100  # 다중 할당문\r\nprint(num1, num2, num3)\r\n> 100, 100, 100\r\n\r\nnum4, num5 = 400, 500     # 동시 할당문\r\nprint(num4, num5)\r\n> 400, 500\r\n```\r\n<br>\r\n\r\n### - 비트 연산자\r\n\r\n비트 연산자에 경우, 필자의 경험상 많이 사용하지 않는다. 직관적이지 않고 혼동의 우려가 있기 때문에 선호하지는 않지만, 굳이 비트 연산자를 사용하는 경우가 있다. 이는 비트 연산자가 가진 큰 장점 때문인데, ***연산이 빠르다는 것***이다. 아래 표를 통해 비트 연산자를 정리해두었다.\r\n\r\n| 연산자 | 의미 | 설명 |\r\n|:---:|:---|---|\r\n| & | 비트 단위 AND | 두 피연산자의 해당 비트가 모두 1이면 1, 아니면 0 |\r\n| \\| | 비트 단위 OR | 두 피연산자의 해당 비트가 하나라도 1이면 1, 아니면 0 |\r\n| ^ | 비트 단위 XOR | 두 피연산자의 해당 비트가 값이 같으면 1, 아니면 0 |\r\n| ~ | 비트 단위 NOT | 피연산자의 해당 비트가 0이면 1, 1이면 0 |\r\n| << | 비트 단위 왼쪽으로 이동 | 지정된 개수만큼 모든 비트를 왼쪽으로 이동 |\r\n| >> | 비트 단위 오른쪽으로 이동 | 지정된 개수만큼 모든 비트를 오른쪽으로 이동 |\r\n\r\n파이썬에서 이진수 값을 확인하는 방법은 간단하다. _'bin'_ 함수를 사용하면 쉽게 이진수 형식으로 출력이 가능하다. 아래 예제로 확인해보자.\r\n\r\n```python\r\nbin(9)    # 2진수 형식으로 출력\r\n> '0b1001'  # 0b는 binary라는 의미\r\n```\r\n<br>\r\n\r\n### - 루프 제어변수 익명화\r\n\r\n불필요한 메모리 사용을 줄이기 위해, 혹은 한번만 사용할 것에 대해 이름을 정하는 것이 불필요하다고 생각할 수 있다. 이를 위해 **익명화** 라는 기능이 있다. 아래 예제를 보며 알아가보자.\r\n\r\n```python\r\nfor i in range(3):\r\n    print('Hello World')\r\n\r\n> Hello World\r\n> Hello World\r\n> Hello World\r\n\r\nfor _ in range(3):    # 루프 변수의 익명화\r\n    print('Hello World')\r\n\r\n> Hello World\r\n> Hello World\r\n> Hello World\r\n```\r\n\r\n**\\+** range\r\n  추가적으로 range에 대해 조금 설명을 하자면, range는 세가지 변수를 가질 수 있다.  \r\n<br>\r\n\r\n  ```python\r\n  range(start, stop, step)\r\n  ```\r\n<br>\r\n\r\n  **start**는 시작값을 지정해주는 변수로, 생략시 0으로 할당된다.\r\n  **stop**은 반복이 끝나는 시점을 알려주는 변수로, stop 보다 작은 경우에 반복한다.\r\n  **step**은 증가값을 지정해주는 변수로, 생략시 1로 할당된다.\r\n<br><br>\r\n\r\n  여기서 주의할 점은, stop이 ***'미만'*** 이므로 0부터 10까지의 정수 출력을 원한다면, _range(0, 10, 1)_이 아닌, **range(0, 11, 1)**을 해야한다.\r\n\r\n<br>\r\n\r\n### - 반복문의 break, continue\r\n\r\n반복문에서 특정 조건일 때, 반복을 그만하거나 건너뛰고 싶을 수 있다. 그럴때 break 혹은 continue를 사용하면 프로그램 제어를 효율적으로 할 수 있다. 아래 예시를 통해 확인해보자.\r\n\r\n```python\r\nst = 'start'\r\n\r\n# 모음을 찾으면 반복문 종료\r\nfor ch in st:\r\n    if ch in ['a', 'e', 'i', 'o', 'u']:\r\n        break\r\n    print(ch, end = '')\r\n\r\n> st\r\n```\r\n\r\n```python\r\nst = 'start'\r\n\r\n# 자음만 출력\r\nfor ch in st:\r\n    if ch in ['a', 'e', 'i', 'o', 'u']:\r\n        continue            # 모음이면, 아래 print 함수 건너뜀\r\n    print(ch, end = '')\r\n\r\n> strt\r\n```\r\n<br>\r\n\r\n> break와 continue는 프로그램 제어에 효과적이지만, 너무 많이 사용하면 제어 흐름에 일관성이 없어져 프로그램 이해에 어려움을 겪을 수 있다.\r\n따라서 필요한 경우에만 사용하는 것을 권장한다.\r\n\r\n<br><br>\r\n\r\n### - 함수의 전역변수 참조, 인자 전달\r\n\r\n전역변수를 자주 사용하는 것은 에러의 주 원인이 된다. 따라서 사용을 최대한 줄여야하지만, 불가피하게 사용해야할 경우가 있다. 이 때, 함수에서 전역변수의 참조 방법을 설명하려고 한다. 다음 예제로 확인해보자.\r\n\r\n```python\r\ndef print_sum():\r\n    global a, b\r\n    a, b = 10, 20\r\n    result = a + b\r\n    print('함수 내부의 sum:', result)       # a, b는 함수 외부에서 선언된 변수를 사용함\r\n\r\na, b = 1, 2\r\nprint_sum()       # 두 전역변수를 a = 10, b = 20으로 변환\r\nresult = a + b\r\nprint('함수 외부의 sum:', result)\r\n```\r\n\r\n<span style=\"color: skyblue;\">실행결과</span>\r\n```shell\r\n함수 내부의 sum: 30\r\n함수 외부의 sum: 30\r\n```\r\n\r\n단, ***'global'*** 은 할당문에서 사용할 수 없다.\r\n```python\r\nglobal a = 10   # 문법오류 발생\r\n```\r\n\r\n<br>\r\n\r\n또한 함수를 호출할 때, 인자를 빠뜨리더라도 에러가 발생하지 않도록 할 수 있다. 바로 ***디폴트 인자*** 를 통해 매개변수에 기본값을 할당해 줄 수 있다. 아래 예제를 통해 확인해보자.\r\n\r\n```python\r\ndef print_star(n = 1):      # 매개변수는 기본값으로 1을 가짐\r\n    for _ in range(n):\r\n        print('*', end = '')\r\n    print('')\r\n\r\nprint_star()      # 인자를 전달하지 않아, n = 1 설정됨\r\nprint_star(5)     # 5를 인자로 전달하여, n = 1 은 수행되지 않음\r\n```\r\n\r\n<span style=\"color: skyblue;\">실행결과</span>\r\n```shell\r\n*\r\n*****\r\n```\r\n\r\n단, 디폴트 매개변수를 할당할 때는, 전체 매개변수에 할당하거나, **매개변수 출현 순서상 뒤에 있는 변수부터 할당**해야한다.\r\n아래 예제를 통해 구체적으로 확인해보자.\r\n\r\n```python\r\ndef sum_first(a, b = 2):\r\n    return a + b\r\n\r\nprint('first sum:', sum_first(1))\r\n```\r\n<span style=\"color: skyblue;\">실행결과</span>\r\n```shell\r\nfirst sum: 3\r\n```\r\n\r\n<br>\r\n\r\n위와 달리, 첫번째 매개변수에 디폴트 값을 지정해주면 오류가 발생한다.\r\n\r\n```python\r\ndef sum_second(a = 1, b):       # 디폴트 매개변수 오류\r\n    return a + b\r\n\r\nprint('second sum:', sum_second(2))\r\n```\r\n<span style=\"color: skyblue;\">실행결과</span>\r\n```shell\r\nSyntaxError: non-default argument follows default argument\r\n```\r\n\r\n<br>\r\n\r\n### - 객체의 식별값\r\n\r\n파이썬은 많은 내장함수를 가지고 있다. 그 중, ***id()*** 를 알아보자.  \r\n파이썬은 객체지향 프로그래밍 언어로, 객체마다 다른 객체와 구별되는 고유한 **식별값**을 갖는다. 이를 정수형으로 반환해주는 함수가 바로 ***id()***이다. 아래 예제로 확인해보자.\r\n\r\n```python\r\nstr_a = \"HELLO!\"\r\nid(str_a)\r\n\r\n> 21989600\r\n\r\nn = 100\r\nid(n)\r\n\r\n> 1919929824\r\n```","excerpt":"파이썬을 다시 공부하다 알게된 점 필자는 파이썬으로 개발을 하면서 파이썬 기본서를 본 적이 없다. 다른 언어를 하면서 익힌 내용들을 바탕으로 구글링을 통해 개발을 하였다.\n그래서 이번에 파이썬 개발서를 한번 훑다가 몰랐던 기능들 혹은 정리하고 싶은 …","fields":{"slug":"/python_basic/"},"frontmatter":{"date":"Nov 23, 2020","title":"파이썬 기초 1","tags":["python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\r\n## 소개\r\n\r\n안녕하세요 저는 대학교에서 소프트웨어학과를 다니고 있는 학생입니다.\r\n제가 공부한 내용을 정리함과 동시에 다른 사람과 공유하면 좋을 것 같습니다.\r\n제가 아직 부족해서 게시글 중에 잘못된 정보가 포함되어 있을 수 있습니다.\r\n혹시 발견하시면 부담없이 댓글로 알려주시면 감사할 것 같습니다.\r\n\r\n## 블로그를 하게 된 계기\r\n\r\n사실 앞으로 살면서 내가 블로그를 하게 될 거라는 상상조차 하지 못할 정도로 블로그에 관심이 없었다.\r\n그러던 와중에, 학교 공부를 하면서 내가 배운 내용들을 제대로 알고 있는 것인가에 대한 의문이 생기기 시작했다.\r\n\r\n어려서부터 스스로 기본이 탄탄하지 않다고 생각할 때 불안함을 많이 느끼는 성향이 있었다.\r\n그래서 현재 하는 공부에 대해 기본이 튼튼한가? 라는 질문을 스스로에게 던지게 되었고, 답은 '아니다'라고 결론을 내리게 되었다.\r\n물론 지금 내가 하는 생각에 공감하지 못하는 사람도 있을 것이다.\r\n\r\n_이 분야는 기존의 것에 집중하기 보다는 새로운 것을 받아들이고\r\n응용하는 것에 초점을 두는 것이 좋다, 필요한 정보만 가져가는 것이 효율적으로 옳다_ 라고.\r\n나도 이 말에 공감한다. 나또한 이런 생각에 많이 고민했었다.\r\n그러나 모든 학문에는 뿌리가 되는 내용이 있고, 그것을 바탕으로 시작한다고 생각한다.\r\n그래서 스스로 정리하고 가면 좋을 것 같은 내용을 공부하고, 정리해야겠다는 생각을 하였다.\r\n\r\n이런 생각을 하던 와중에, 같이 프로젝트를 하던 형에게 블로그를 해보는 것은 어떠냐고 추천을 받았다.\r\n공부한 내용을 정리하는데 블로그만한 것이 없다고 하여 시작하게 되었다.\r\n\r\n\r\n\r\n## 블로그 테마\r\n\r\n블로그 설정을 하며 여러가지 테마를 찾아보고 고민했다. 그중에 minimal-mistake로 결정을 하게 되었다.\r\n블로그 초기 설정을 하면서도 내가 많이 부족한 탓에 많이 애먹었다. 그러다 _Junho Baik_ 님이 정리하신 글을 보게 되었다.\r\n거기서 _Junho Baik_ 님이 만드신 *[\"Borderless\"](https://github.com/junhobaik/junhobaik.github.io 'Borderless Github Homepage')* 라는 테마를 알게 되었고, 내가 생각하는 블로그 이미지에 적합하다고 생각되어 사용하게 되었다.\r\n\r\n\r\n   \r\n   \r\n## 끝맺음\r\n\r\n아직 많이 부족하지만, 잘못된 정보 없이 글을 작성하려고 노력하겠다. 내 블로그로 인해 누군가 도움을 받고, 나도 성장할 수 있었으면 좋겠다.\r\n","excerpt":"소개 안녕하세요 저는 대학교에서 소프트웨어학과를 다니고 있는 학생입니다.\n제가 공부한 내용을 정리함과 동시에 다른 사람과 공유하면 좋을 것 같습니다.\n제가 아직 부족해서 게시글 중에 잘못된 정보가 포함되어 있을 수 있습니다.\n혹시 발견하시면 부담없이…","fields":{"slug":"/intro/"},"frontmatter":{"date":"Nov 20, 2020","title":"블로그 소개","tags":["intro"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}